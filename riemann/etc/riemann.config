; -*- mode: clojure; -*-
; vim: filetype=clojure
(logging/init {:file "/var/log/riemann.log"})

(require '[clojure.string :as str])
(def victorops-api-key "TODO") ; TODO 
(def victorops-routing-key "architecture") 


; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(defn nop [event]
  )

(defn profiler [index]
  (where (not (expired? event))
         (splitp re-matches service
                 ; Aggregate rate of samples taken
                 #".*profiler rate" (coalesce
                                      ; Total sample rate
                                      (smap folds/sum
                                            (with :host nil
                                                  index))

                                      ; Distinct number of hosts
                                      (smap folds/count
                                            (adjust [:service str/replace "rate" "hosts"]
                                                    (with :host nil
                                                      index))))

                 ; Flatten function times across hosts, updating every 60s.
                 #".*profiler fn .+"
                 (pipe - (by :service
                             (coalesce 60
                                       (smap folds/sum
                                             (with {:host nil :ttl 120} -))))
                       ; And index the top 10.
                       (top 10 :metric
                            index
                            (with :state "expired" index))))))

(defn index-ok [index]
  (with :state "ok" index))

(defn sum [index]
  (by [:service] (coalesce
                   (smap folds/sum
                         (with :host nil
                           (index-ok index))))))

(defn appender-metrics [index]
  (where (not (expired? event))
         (splitp re-matches service
                 #".*count$" (sum index) 
                 index)))

(defn servlet-metrics [index]
  (where (not (expired? event))
         (splitp re-matches service
                 #".*5xx-responses m5_rate" (smap (fn [{:keys [metric] :as e}]
                                                    (assoc e :state (if (> metric 0.001) ; treshold
                                                                      "critical"
                                                                      "ok")))
                                                  index)
                 #".*m5_rate" (index-ok index)
                 #".*p.*" (index-ok index)
                 #".*count$" (sum index) 
                 nop)))

(defn jvm-memory-metrics [index]
  (where (not (expired? event))
        (splitp re-matches service
                 #".*heap\.used$" (scale (/ 1 1024 1024)
                                         (index-ok index))
                nop)))

(defn notify [index]
  (let [vo (victorops victorops-api-key victorops-routing-key)]
    (changed-state (where (state "info") (:info vo))
                   (where (state "warning") (:warning vo))
                   (where (state "critical") (:critical vo))
                   (where (state "ok") (:recovery vo)))))

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (splitp re-find service
      ; Route profiler events to the profiler
      #"^someWebApp profiler" (profiler index)
      #"^ch.qos.logback.core.Appender" (appender-metrics index)
      #"^org.eclipse.jetty.servlet.ServletHandler" (servlet-metrics index)
      #"^memory" (jvm-memory-metrics index)
      #"^fridge" (notify index)
      (default {:ttl 60 :state "ok"} index))))
