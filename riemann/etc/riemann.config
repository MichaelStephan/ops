; -*- mode: clojure; -*-
; vim: filetype=clojure
(logging/init {:file "/var/log/riemann.log"})

(def victorops-api-key "TODO") ; TODO 
(def victorops-routing-key "architecture") 

; overriding the graphite-server decode-graphite-line function. 
; It is responsible for parsing a line. Per definition graphite
; can only carry numeric metrics. This implementation is more
; flexible and also allows other types
(binding [*ns* (find-ns 'riemann.transport.graphite)] 
  (eval '(def decode-graphite-line
           (fn [line]
             (let [[service metric timestamp & garbage] (split line #"\s+")]
               ; Validate format
               (cond garbage
                     (throw+ "too many fields")
                     
                     (= "" service)
                     (throw+ "blank line")
                     
                     (not metric)
                     (throw+ "no metric")
                     
                     (not timestamp)
                     (throw+ "no timestamp")
                     
                     (re-find #"(?i)nan" metric)
                     (throw+ "NaN metric"))
    ; Parse numbers
    (let [metric (try (Double. metric)
                      (catch NumberFormatException e
                        ; still proceed although the metric could not be transformed into a numeric value
                        metric ))
          timestamp (try (Long. timestamp)
                         (catch NumberFormatException e
                           (throw+ "invalid timestamp")))
          [host service] (clojure.string/split service #"\." 2)]
      ; Construct event
      (->Event host 
               service
               nil
               nil
               metric
               nil
               timestamp
               nil)))))))

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (graphite-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(def devnull (fn [& _]))

; TODO optimize, make better change detection
(defn delta-over-time [n & children]
  (moving-time-window n
                      #(when (> (count %) 1)
                         (let [f (first %) l (last %)
                               fval (:metric f)
                               lval (:metric l)]
                           (when (and (number? fval) (number? lval))
                             (call-rescue (assoc l
                                                 :metric (- lval fval)
                                                 :service (str (:service l) "_dt"))
                                          children))))))

(defn sum [& children]
  (coalesce
    (smap folds/sum
          (adjust [:service clojure.string/replace #"$" "_sum"]
                  index))))

(defn profiler [index]
  (splitp re-find service
          ; Aggregate rate of samples taken
          #"profiler rate" (coalesce
                               ; Total sample rate
                               (smap folds/sum
                                     (with :host nil
                                           index))

                               ; Distinct number of hosts
                               (smap folds/count
                                     (adjust [:service clojure.string/replace "rate" "hosts"]
                                             (with :host nil
                                               index))))

          ; Flatten function times across hosts, updating every 60s.
          #"profiler fn"
          (pipe - (by :service
                      (coalesce 60
                                (smap folds/sum
                                      (with {:host nil :ttl 120} -))))
                ; And index the top 10.
                (top 10 :metric
                     index
                     (with :state "expired" index)))))

(defn appender-metrics [index]
  (splitp re-find service
          #"count" (where true
                          ; Sum up counters for all hosts
                          (by [:service]
                              (coalesce 4 
                                (smap folds/sum
                                      (with {:host nil}
                                        (adjust [:service clojure.string/replace #"$" "_sum"]
                                                ; Calcuate delta every 30 seconds
                                                (delta-over-time 30 index))))))
                          (where (not (service "ch.qos.logback.core.Appender.all count"))
                            (by [:host :service]
                                (delta-over-time 30 index))))
          devnull))

(defn servlet-metrics [index]
  (splitp re-find service
          #"5xx-responses count" (by [:host :service] 
                                     (delta-over-time 30
                                                      (smap (fn [{:keys [metric] :as e}]
                                                              (assoc e :state (if (> metric 0.001) ; treshold
                                                                                "critical"
                                                                                "ok")))
                                                        index)))
          #"xx-responses count" (by [:host :service]
                                    (delta-over-time 30 index))
          #".*p.*" index
          devnull))

(defn jvm-memory-metrics [index]
  (splitp re-find service
          #".*heap\.used$" (scale (/ 1 1024 1024)
                                  index)
          devnull))

(defn thread-metrics [index]
  (splitp contains? service
          #{"threads.count"
            "threads.blocked.count"
            "threads.timed_waiting.count"
            "threads.waiting.count"} index
          devnull))

(defn maximum [index]
  (by [:service] (coalesce
                   (smap folds/maximum
                         (with :host nil
                           index)))))

(defn hystrix-metrics [index]
  (splitp re-find service
          #"isCircuitBreakerOpen" index
          #"countSuccess" (by [:host :service]
                              (delta-over-time 30 index))
          #"countTimeout|countFailure|countExceptionsThrown|countThreadPoolRejected|countShortCircuited" (by [:host :service]
                                                                                                             (delta-over-time 30 index))
          #"latencyTotal_percentile" (maximum index)
          devnull))

(defn notify [index]
  (let [vo (victorops victorops-api-key victorops-routing-key)]
    (changed-state (where (state "info") (:info vo))
                   (where (state "warning") (:warning vo))
                   (where (state "critical") (:critical vo))
                   (where (state "ok") (:recovery vo)))))

(let [index (index)]
  (streams
    (where (not (or
                  (service nil)
                  (expired? event)))
           (splitp re-find service
                   ; Route profiler events to the profiler
                   #"^someWebApp profiler" (profiler index) ; events are not tagged
                   #"^ch.qos.logback.core.Appender" (appender-metrics index)
                   #"^org.eclipse.jetty.servlet.ServletHandler" (servlet-metrics index)
                   #"^memory" (jvm-memory-metrics index)
                   #"^threads" (thread-metrics index)
                   #"^.*hystrix.*" (hystrix-metrics index)
                   ;#"^fridge" (notify index)
                   (default {:ttl 60 :state "ok"} index)))))
