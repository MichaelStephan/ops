; -*- mode: clojure; -*-
; vim: filetype=clojure

(def victorops-api-key "")

(when-not (clojure.test/function? 'streams_)
  (def streams_ streams)
  (def streams (fn [& _]))
  (def index (index))
  (let [host "0.0.0.0"]
    (tcp-server {:host host})
    (udp-server {:host host})
    (ws-server  {:host host})))

; ----- threshold START -----
(defn find-specific-threshold
  [{:keys [host tags]}
   {:keys [match-host match-tag match-default] :as threshold}]
  (cond
   match-tag     (and ((set tags) match-tag) threshold)
   match-host    (and (= match-host host) threshold)
   match-default threshold))

(defn match-threshold
  [{:keys [service]} [pattern payload]]
  (when (re-matches pattern service)
    payload))

(defn find-threshold
  [thresholds re-patterns event]
  (if-let [thresholds (or (get thresholds (:service event))
                          (some (partial match-threshold event) re-patterns))]
    (if (sequential? thresholds)
      (some (partial find-specific-threshold event) thresholds)
      thresholds)))

(defn threshold-check
  "Given a list of standard or inverted thresholds, yield
   a function that will adapt an inputs state.
   The output function does not process events with no metrics"
  [thresholds]
  (let [re-patterns (filter (complement (comp string? key)) thresholds)]
    (fn [{:keys [metric tags state] :as event}]
      (try
        (if-let [{:keys [warning critical invert exact add-tags]}
                 (if metric (find-threshold thresholds re-patterns event))]
          (assoc event
            :tags (clojure.set/union (set tags) (set add-tags))
            :state
            (cond
             (nil? metric) "unknown"
             (and exact (not= (double metric) (double exact))) "critical"
             (and exact (= (double metric) (double exact)))    "ok"
             (and critical ((if invert <= >) metric critical)) "critical"
             (and warning ((if invert <= >) metric warning)) "warning"
             :else "ok"))
          (if (nil? state)
            (assoc event :state "ok")
            event))
        (catch Exception e
          (error e "threshold-check failed for " event))))))

; ----- threshold END -----

(def configured-threshold-check (partial threshold-check
                                         {"package ch.qos.logback.core.Appender.error count_dt" {:warning 0.1 :critical 100}
                                          "package javax.servlet.Filter.5xx-responses count_dt" {:critical 100}
                                          "package memory.heap.used" {:warning 800.0 :critical 900.0}
                                          "package thread.count" {:warning 90 :critical 450}
 
                                          "subscription-management ch.qos.logback.core.Appender.error count_dt" {:warning 0.1 :critical 100}
                                          "subscription-management javax.servlet.Filter.5xx-responses count_dt" {:critical 100}
                                          "subscription-management memory.heap.used" {:warning 800.0 :critical 900.0}
                                          "subscription-management thread.count" {:warning 90 :critical 450}
 
                                          "market-catalog ch.qos.logback.core.Appender.error count_dt" {:warning 0.1 :critical 100}
                                          "market-catalog javax.servlet.Filter.5xx-responses count_dt" {:critical 100}
                                          "market-catalog memory.heap.used" {:warning 800.0 :critical 900.0}
                                          "market-catalog thread.count" {:warning 90 :critical 450}

                                          "package hystrix.HystrixCommand.subscription-getBySubscriberAndId.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.subscription-getByTenant.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.subscription-terminateSubscriptions.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-getByQuery.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-Update.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-Create.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-Delete.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-AttributeDelete.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-getById.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-removeProductByPackage.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-notifySubscribersByPackage.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.sendEmail.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-createProduct.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-deleteProduct.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-getServicesByProject.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-getBuilderModulesByProject.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-getApplicationById.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-getClientCredentialsById.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-getProjectById.package_remote" {:critical 100}
                                          "package hystrix.HystrixCommand.data-getProjectUserRoles.package_remote" {:critical 100}
                                          
                                          "subscription-management hystrix.HystrixCommand.data-GetProjectRoles.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetProjectRolesInfo.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetProjectById.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetAvailableUserProjects.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-CreateSubscribersMailingList.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-CreateSubscriptionsEmailJob.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetMarketData.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-getById.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-Create.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetById.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetPackageByVersionId.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetPackageByPackageId.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetTenantSubscriptions.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetSubscriptionById.subscription-management_remote" {:critical 100}
                                          "subscription-management hystrix.HystrixCommand.data-GetPackageSubscriptions.subscription-management_remote" {:critical 100}

                                          "market-catalog hystrix.HystrixCommand.data-GetPackageByVersionId.market-catalog_remote" {:critical 100}
                                          "market-catalog hystrix.HystrixCommand.data-getById.market-catalog_remote" {:critical 100}
                                          "market-catalog hystrix.HystrixCommand.data-create.market-catalog_remote" {:critical 100}
                                          "market-catalog hystrix.HystrixCommand.data-getAll.market-catalog_remote" {:critical 100}
                                          "market-catalog hystrix.HystrixCommand.data-delete.market-catalog_remote" {:critical 100}}))

(def notification-mappings {})
(def default-notification-mapping "7up")

; ----- common START -----
(defn service-name [{:keys [service]}]
  (if service
    (let [[service metric] (clojure.string/split service #" " 2)]
      (cond
        (and
          (.endsWith service "_remote")
          (.startsWith metric "hystrix.HystrixCommand")) (let [tmp (clojure.string/split metric #"-" 4)
                                                               [_ _ remote-service] tmp]
                                                           (condp >= 4
                                                             (count tmp) remote-service
                                                             service))
        :else service))
    "unknown"))

; ----- common END -----

; ----- maintenance START -----
; borrowed from https://kartar.net/2016/04/managing-maintenance-with-riemann/
(defn maintenance-mode? [event]
  (when-let [service (service-name event)]
    (let [active? (->> (list 'and
                             '(= :type "maintenance-mode")
                             (list '= :service service))
                       (riemann.index/search (:index @core))
                       first
                       :state
                       (= "active"))]
      (when active?
        (info (str "Not notifying about `" service "` as maintenance mode is on"))
        active?))))

(defn collect-maintenance-signal [index]
  (where (and
           (not (expired? event))
           (= "maintenance-mode" (:type event)))
         index))
; ----- maintenance END -----

(include "victorops.clj")
; ----- notification START -----
(defn- format-event [event-type event]
  { :message_type event-type
    :entity_id (:service event) 
    :state_message (str (:host event) " " (:service event) " is " (:state event) " (" (:metric event) ")")})

(defn victorops [api-key routing-key]
  {:info (fn [e] (post (format-event :INFO e) e api-key routing-key))
   :critical (fn [e] (post (format-event :CRITICAL e) e api-key routing-key))
   :warning (fn [e] (post (format-event :WARNING e) e api-key routing-key))
   :recover (fn [e] ; do nothing as automatic recovery shall by disabled now 
              #_(post (format-event :RECOVERY e) e api-key routing-key))})

(defn notify [routing-key]
  (let [vo (victorops victorops-api-key routing-key)]
    (splitp re-find (:state event)
            #"^info$" (:info vo)
            #"^warning$" (:warning vo)
            #"^critical$" (:critical vo)
            #"^ok$" (:recover vo))))

(defn tell-team [mapping]
  (changed :state {:init "ok"}
           (where (not (maintenance-mode? event))
             (notify (get mapping (keyword (service-name event)) default-notification-mapping)))))
; ----- notification END -----


(def configured-tell-team (partial tell-team notification-mappings))

; ----- health START -----
(defn collect-health-signal [index]
  (where (and (not= service nil)
              (re-find #"-health$" service))
         (by [:service]
             (changed-state {:init "ok"}
                            (adjust [:state #(if (= % "expired")
                                               "critical"
                                               %)]
                                    (configured-tell-team)
                                    index)))))

(defn create-health-signal [index]
  (where (and
           (not= service nil)
           (or 
             ; add hystrix
             (re-find #" javax.servlet.Filter.2xx-responses count" service))
           (not (expired? event))
           (not= (:type event) "maintenance-mode"))
         (adjust #(let [{:keys [service]} %]
                    (assoc %
                           :service (str (first (clojure.string/split service #" |_" 2))
                                         "-health")
                           :metric 1
                           :ttl 30 
                           :host nil
                           :tags nil
                           :state "ok"))
                 reinject
                 index)))
; ----- health END -----

; ----- patches START -----
; overriding the graphite-server decode-graphite-line function. 
; It is responsible for parsing a line. Per definition graphite
; can only carry numeric metrics. This implementation is more
; flexible and also allows other types
(binding [*ns* (find-ns 'riemann.transport.graphite)] 
  (eval '(def decode-graphite-line
           (fn [line]
             (let [[service metric timestamp & garbage] (split line #"\s+")]
               ; Validate format
               (cond garbage
                     (throw+ "too many fields")
                     
                     (= "" service)
                     (throw+ "blank line")
                     
                     (not metric)
                     (throw+ "no metric")
                     
                     (not timestamp)
                     (throw+ "no timestamp")
                     
                     (re-find #"(?i)nan" metric)
                     (throw+ "NaN metric"))
    ; Parse numbers
    (let [metric (try (Double. metric)
                      (catch NumberFormatException e
                        ; still proceed although the metric could not be transformed into a numeric value
                        metric ))
          timestamp (try (Long. timestamp)
                         (catch NumberFormatException e
                           (throw+ "invalid timestamp")))
          [host service-name metric-name] (clojure.string/split service #"\." 3)]
      ; Construct event
      (->Event host 
               (str service-name " " metric-name)
               nil
               nil
               metric
               nil
               timestamp
               nil)))))))
; ----- patches END -----

; ----- functions START -----
(def devnull (fn [& _]))

(defn delta-over-time [n & children]
  (moving-time-window n (fn [[head & rest]]
                          (when rest
                            (let [fval (:metric head)
                                  l (folds/maximum rest)
                                  lval (:metric l)]
                              (when (and (number? fval) (number? lval))
                                (call-rescue (assoc l
                                                    :metric (- lval fval)
                                                    :service (str (:service l) "_dt"))
                                             children)))))))

; ----- functions END -----

; ----- profiler START -----
(defn collect-profiler-metrics [index]
  (where (and
           (not (expired? event))
           (not= service nil))
    (splitp re-find service
            ; Aggregate rate of samples taken
            #"profiler rate" (coalesce
                                 ; Total sample rate
                                 (smap folds/sum
                                       (with :host nil
                                             index))

                                 ; Distinct number of hosts
                                 (smap folds/count
                                       (adjust [:service clojure.string/replace "rate" "hosts"]
                                               (with :host nil
                                                 index))))

            ; Flatten function times across hosts, updating every 60s.
            #"profiler fn"
            (pipe - (by :service
                        (coalesce 60
                                  (smap folds/sum
                                        (with {:host nil :ttl 120} -))))
                  ; And index the top 10.
                  (top 10 :metric
                       index
                       (with :state "expired" index)))
            devnull)))

; ----- profiler END -----

; ----- appender START -----
(defn collect-appender-metrics [index]
  (where (and
           (not (expired? event))
           (not= service nil)
           (re-find #" ch.qos.logback.core.Appender" service))
    (splitp re-find service
            #"debug count|error count|info count|trace count|warn count" (by [:host :service]
                                                                             (delta-over-time 60
                                                                                              (smap (configured-threshold-check)
                                                                                                    (configured-tell-team)
                                                                                                    index)
                                                                                              (where (re-find #"error count" service)
                                                                                                     (coalesce
                                                                                                       (smap folds/sum
                                                                                                             (with :host nil
                                                                                                               index))))))
            #"all count"
            ; Sum up counters for all hosts
            (by [:service]
                (coalesce 4
                          (smap folds/sum
                                (with {:host nil}
                                  (adjust [:service clojure.string/replace #"$" "_sum"]
                                          ; Calcuate delta every N seconds
                                          (delta-over-time 60
                                                           index))))))
            devnull)))

; ----- appender END -----

; ----- servlet START -----
(defn collect-servlet-metrics [index]
  (let [index (smap (configured-threshold-check)
                    index)]
    (where (and
             (not (expired? event))
             (not= service nil)
             (re-find #" javax.servlet.Filter" service))
      (splitp re-find service
              #"\.requests count" (by [:service]
                                    (smap folds/sum
                                          (adjust [:service clojure.string/replace #"$" "_sum"]
                                                  (with :host nil
                                                    index))))
              #"xx-responses count" (by [:host :service]
                                        (delta-over-time 60
                                                         (smap (configured-threshold-check)
                                                               (configured-tell-team)
                                                               index)
                                                         (where (re-find #"5xx" service)
                                                                (coalesce
                                                                  (smap folds/sum
                                                                        (with :host nil
                                                                          index))))))
              #".*p.*" index
            devnull))))

; ----- servlet END -----

; ----- memory START -----
(defn collect-memory-metrics [index]
  (where (and (not (expired? event))
              (not= service nil)
              (re-find #" memory" service)
              (re-find #".*heap\.used$" service))
         (scale (/ 1 1024 1024)
                (smap (configured-threshold-check)
                      (configured-tell-team)
                      index))))
; ----- memory END -----

; ----- thread START -----
(defn collect-thread-metrics [index]
  (where (and
           (not (expired? event))
           (not= service nil)
           (re-find #"thread.count|thread.blocked.count|thread.timed_waiting.count|thread.waiting.count" service))
         (smap (configured-threshold-check)
               (configured-tell-team)
                index)))
; ----- thread END -----

; ----- gc START -----
(defn collect-gc-metrics [index]
  (where (and
           (not (expired? event))
           (not= service nil)
           (re-find #" gc" service))
         index))
; ----- gc END -----

; ----- hystrix START -----
(defn collect-hystrix-metrics [index]
  (where (and
           (not (expired? event))
           (not= service nil)
           (re-find #"_remote hystrix" service))
         (splitp re-find service
                 #"isCircuitBreakerOpen" (adjust (fn [{:keys [service metric] :as e}]
                                                   (assoc e :metric (if (= "true" metric)
                                                                      1.0
                                                                      0.0)))
                                                 (smap (configured-threshold-check)
                                                       (configured-tell-team)
                                                       index))
                 #"countSuccess" (by [:host :service]
                                     (delta-over-time 60
                                                      index))
                 #"countTimeout|countFailure|countExceptionsThrown|countThreadPoolRejected|countShortCircuited" (by [:host :service]
                                                                                                                    (delta-over-time 60
                                                                                                                                     (smap (configured-threshold-check)
                                                                                                                                           (configured-tell-team)
                                                                                                                                           index)
                                                                                                                                     (where (re-find #"countFailure" service)
                                                                                                                                            (adjust [:service #(str
                                                                                                                                                                 (-> %1
                                                                                                                                                                     (clojure.string/split #" " 2)
                                                                                                                                                                     (clojure.string/replace #"_remote" "")
                                                                                                                                                                     first)
                                                                                                                                                                 " hystrix.HystrixCommand%countFailure_dt")]
                                                                                                                                                    (coalesce
                                                                                                                                                      (smap folds/sum
                                                                                                                                                            (with :host nil
                                                                                                                                                              index)))))))
                 #"latencyTotal_percentile" (by [:service] (coalesce
                                                             (smap folds/maximum
                                                                   (with :host nil
                                                                     index))))
                 devnull)))
; ----- hystrix END -----


(let [host "0.0.0.0"]
  (graphite-server  {:host host}))

(let [index (with {:ttl 60} (riemann.test/tap :index index))]
  (streams_
    (collect-profiler-metrics index)
    (collect-appender-metrics index)
    (collect-servlet-metrics index)
    (collect-memory-metrics index)
    (collect-thread-metrics index)
    (collect-gc-metrics index)
    (create-health-signal index)
    (collect-health-signal index)
    (collect-hystrix-metrics index)
    (collect-maintenance-signal index)))
