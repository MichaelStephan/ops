; -*- mode: clojure; -*-
; vim: filetype=clojure

(def victorops-api-key "TODO")

(include "threshold.clj")

(def configured-threshold-check (partial threshold-check 
                                         {"someWebApp ch.qos.logback.core.Appender.error count_dt" {:critical 0.1}
                                          "someWebApp javax.servlet.Filter.5xx-responses count_dt" {:critical 0.1}
                                          "someWebApp memory.heap.used" {:warning 800.0 :critical 900.0}
                                          "someWebApp thread.count" {:warning 90 :critical 100}
                                          "someWebApp_remote hystrix.HystrixCommand.package-v1-repository-data-getByQuery.isCircuitBreakerOpen" {:critical 0.1}
                                          "someWebApp_remote hystrix.HystrixCommand.package-v1-repository-data-getByQuery.countTimeout_dt" {:critical 0.1}
                                          "someWebApp_remote hystrix.HystrixCommand.package-v1-repository-data-getByQuery.countFailure_dt" {:critical 0.1}
                                          "someWebApp_remote hystrix.HystrixCommand.package-v1-repository-data-getByQuery.countExceptionsThrown_dt" {:critical 0.1}
                                          "someWebApp_remote hystrix.HystrixCommand.package-v1-repository-data-getByQuery.countThreadPoolRejected_dt" {:critical 0.1}
                                          "someWebApp_remote hystrix.HystrixCommand.package-v1-repository-data-getByQuery.countShortCircuited_dt" {:critical 0.1}}))

(def notification-mappings {})
(def default-notification-mapping "7up")

(include "common.clj")
(include "maintenance.clj")
(include "victorops.clj")
(include "notification.clj")

(def configured-tell-team (partial tell-team notification-mappings))

(include "health.clj")
(include "patches.clj")
(include "functions.clj")
(include "profiler.clj")
(include "appender.clj")
(include "servlet.clj")
(include "memory.clj")
(include "thread.clj")
(include "gc.clj")
(include "hystrix.clj")

(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (graphite-server  {:host host}))

(periodically-expire 10)

(let [index (with {:ttl 60} (riemann.test/tap :index (index)))]
  (streams
    (collect-profiler-metrics index)
    (collect-appender-metrics index)
    (collect-servlet-metrics index)
    (collect-memory-metrics index)
    (collect-thread-metrics index)
    (collect-gc-metrics index)
    (create-health-signal index)
    (collect-health-signal index)
    (collect-hystrix-metrics index)
    (collect-maintenance-signal index)))
